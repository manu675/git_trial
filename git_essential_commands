## Git/Github/Git Bash Crash Course and Essential Commands ##

Elaborate tutorial on git commands:
https://www.geeksforgeeks.org/working-on-git-bash/

GITHUB is   1) a version control system
            2) a publishing tool
            3) a collaboration platform

Advantage: ability to save process and go back to earlier points of the project           

GIT BASH is an application that provides Git command line experience on the 
Operating System
It is a command-line shell for enabling git with the command line in the 
system. 
A shell is a terminal application used to interface with an 
operating system through written commands

GIT is version-control system for tracking changes in source code during 
software development.

HOW TO PUSH CODE TO GITHUB

# step 1) create a new repository on github 

# the remote repository URL is:
https://github.com/manu675/git_trial.git

# step 2) open the terminal

# get and locate the present working directory

pwd

## the current wd is /Users/Manu


# step 3) set your local project as the current working directory

cd /Users/Manu/Documents/GitHub/git_trial

# the ls command shows all the files contained in the current wd

ls

# step 4) initialize the local directory as a git repository

git init

# step 5) add files to your new local repository 
# (files are staged for a commit)

git add . # we stage all files in the current wd for a commit

# alternatively, we can add/stage a single file for a commit
# using git add <filename>

# we check all files that are staged for a commit

git status

# to unstage files staged for a commit run the following command

git reset

# Unstaging a specific file:

git reset HEAD <filename>


# step 6) commit the files you have staged in your local repository
# -m "message" is optional and adds comment to the commit

git commit -m "first commit"

## deadling with git merge error E325: 

git merge --abort
rm ~/Documents/GitHub/git_trial/.git/.COMMIT_EDITMSG.swp

## deadling with the commit message:

Just type i and you'll go in the -- INTER -- mode, now you can write your comments.

After you have done, press esc key in your keyboard and you'll go to command mode. (see on the bottom of the console)

Now save changes by writing :w followed by pressing enter key

You can quit now by writing :q followed by pressing enter key


# step 7) add the URL for the remote repository where your local repository
# will be pushed to

git remote add origin https://github.com/manu675/git_trial.git

# step 8) push the code in your local repository to Github 

git push -u origin master

# you will have to enter your github username and password or connect VS Code

# step 9) double check that your file appear in the remote Github repository


FORCING YOUR LOCAL CHANGES TO A REMOTE REPOSITORY = FORCED UPDATE (IF REMOTE REPO CONTAINS CHANGES YOU WANT TO OVERWRITE)

# we use the command git push -f <remote> <branch>

git push -f origin master 

#Leaving off <remote> and <branch> will force push all local branches that have set --set-upstream.


# checking the remote url git will currently push code to
!git config --get remote.origin.url

PULLING CODE FROM A REMOTE REPOSITORY (GITHUB)

git pull    

STASHING

# Stashing is a Git function that allows you to temporarily save your file changes without applying them to your project

git stash
git stash drop



CLONING A REMOTE REPOSITORY TO YOUR LOCAL SYSTEM

# Cloning is used to get a copy of the existing git repository.
# When you run the git clone command it makes the zip folder saved in your default location

Git clone < github url > < local directory >


BRANCHING IN GIT (branches are used to divide the project and create independent lines of development)

It's important to understand that branches are just pointers to commits.

LOCAL BRANCHING

# showing all branches in your repository

git branch

# creating a new branch called <branch_name>

git branch <branch_name>

# To simply switch to a branch 

git checkout <branch_name>

# creating a new branch AND switching to that new branch

git checkout -b <branch_name>

## Now the same commit add and commit actions can be performed on this branch as well

# deleting a branch (which cannot be selected at the momemt)

git branch -d <branch_name>

MERGING (The different lines of development created through branching can be integrated in a single branch again)

git merge


CREATING A NEW DIRECTORY USING GIT

mk stands for make and rm stands for remove

# setting up a new local directory (folder) in your current working directory


mkdir <local_folder_name>

